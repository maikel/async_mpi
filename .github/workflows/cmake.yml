name: ampi-CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Linux GCC 9 Debug (C++20)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: Debug,
            cc: "gcc-9", cxx: "g++-9",
            cmake_args: "-D CMAKE_CXX_STANDARD:STRING=20"
          }
        - {
            name: "Linux GCC 9 Optimised (C++20)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: RelWithDebInfo,
            cc: "gcc-9", cxx: "g++-9",
            cmake_args: "-D CMAKE_CXX_STANDARD:STRING=20"
          }
        - {
            name: "Linux Clang 9 Debug (C++20)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: Debug,
            cc: "clang-9", cxx: "clang++-9",
            cmake_args: "-D CMAKE_CXX_STANDARD:STRING=20 -D \"CMAKE_CXX_FLAGS:STRING=-fsanitize=address -fno-omit-frame-pointer\""
          }
        - {
            name: "Linux Clang 9 Optimised (C++20)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: RelWithDebInfo,
            cc: "clang-9", cxx: "clang++-9",
            cmake_args: "-D CMAKE_CXX_STANDARD:STRING=20"
          }
        - {
            name: "Linux Clang 10 Debug (C++20)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: Debug,
            cc: "clang-10", cxx: "clang++-10",
            cmake_args: "-D CMAKE_CXX_STANDARD:STRING=20 -D \"CMAKE_CXX_FLAGS:STRING=-fsanitize=address -fno-omit-frame-pointer\""
          }
        - {
            name: "Linux Clang 10 Optimised (C++20)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: RelWithDebInfo,
            cc: "clang-10", cxx: "clang++-10",
            cmake_args: "-D CMAKE_CXX_STANDARD:STRING=20"
          }

    steps:
    - uses: actions/checkout@v2
    
    - name: Install Clang 10
      id: install_clang_10
      if: startsWith(matrix.config.os, 'ubuntu') && ( matrix.config.cxx == 'clang++-10' )
      shell: bash
      working-directory: ${{ env.HOME }}
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 10

    - name: Install OpenMPI
      run: sudo apt install libopenmpi-dev
      
    - name: Install oneTBB
      run: sudo apt install libtbb-dev

    - name: Install unifex
      shell: bash
      working-directory: ${{ env.HOME }}
      run: |
        git clone https://github.com/maikel/libunifex.git
        cd libunifex
        mkdir build && cd build
        cmake ../ -DBUILD_TESTING="OFF" -DUNIFEX_BUILD_EXAMPLES="OFF" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX="${{ env.HOME }}/unifex" -DCMAKE_CXX_COMPILER="${{ matrix.config.cxx }}"
        cmake --build . --config Release --target install

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.config.os }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.config.os }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.config.os }}
